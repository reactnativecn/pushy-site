[{"id":0,"title":"场景实践","content":"优化原生和热更包体积#\n\niOS 原生包优化(ipa)#\n\n对于同一份 archive（其版本号、编译时间和内置 bundle 已固定，不会受导出方式所影响），可以用不同选项多次导出 ipa，选择其中最小的上传到\npushy 服务器作为热更基准包。\n\n\n\nAndroid 原生包优化(apk)#\n\napk 的优化主要考虑两个方向：\n\n * 启用 proguard 压缩混淆源码。但这一步可能导致一些使用反射的代码运行时报错，启用后需要充分测试每个页面和功能，以及需要阅读一些第三方关于\n   proguard 的特别设置说明。\n * 分开编译不同的 cpu 架构。找到android/app/build.gradle中的 cpu 架构部分，如下所示启用enable选项：\n\n\n\n如此一来会在编译目录中输出多个 apk 文件，分发和上传到热更新服务时只需要使用app-arm64-v8a-release.apk文件，可以大幅减小 apk\n的大小。\n\n热更新包优化(ppk)#\n\n热更新包的主要内容是 js 包和其所引用的静态资源（主要是图片）。\n\n * js 包成分分析。可以借助一些第三方工具（如react-native-bundle-visualizer）来分析 js\n   文件中哪些占比较大，是否可以用其他库替换等（如 dayjs 替换 moment，lodash-es 替换 lodash）。\n * 图片优化。\n   * 在保证体验的情况下，使用一些工具对图片进行裁剪压缩。\n   * 如不需要图片的透明像素，可以考虑将 png 格式转为 jpg 格式。\n   * 还可以进一步考虑压缩比更高的图片格式，例如 webp 格式（需要第三方原生插件例如react-native-webp-format），heif\n     格式（iOS 11 和 Android 10 以上原生支持）等。这里有个图片格式对比可供参考\n     https://compare.rokka.io/_compare/#heif=40&jpeg=80&webp=80&av1=40&width=800\n     。\n\n有很多渠道包需要热更，如何操作比较方便？#\n\n 1. 如果渠道包的js代码和初始资源有差别（无论多么细微的差别都会生成不同的 jsbundle），那么只能单独生成\n    apk，分别上传和绑定。可以考虑写一些脚本自动调用 cli 来执行批量操作。\n 2. 如果渠道包的js代码和初始资源完全一致，可以考虑使用Flavor 构建，或其他一些动态生成渠道包的方案（比如腾讯的 VasDolly，美团的\n    walle等），这样所有的渠道包基于同一个基础 apk 生成（因而会有相同的编译时间戳和 jsbundle）。这样可以只用上传一个基础 apk，对此\n    apk 的热更操作可以对所有渠道包生效。\n 3. 如果您是高级版、专业版或大客户VIP版客户，也可以考虑在管理后台的应用设置中启用忽略编译时间戳。此选项仅对比版本号，不校验时间戳，可提供更宽容的热更策略\n    ，但可能消耗更多流量。\n\n如何支持 aab 格式的原生包？#\n\n如果您需要使用 aab 格式的 android 原生包，那么可以在上传到 Google play 之后，在其控制台中下载转换后的 apk\n格式（见下图），然后将这个 apk 包上传到热更新的后台，即可正常支持热更新。\n\n\n\nCI 的集成#\n\n在开发环境中，每次 bundle 都会生成一个不同名字的 ppk 文件，这不利于持续集成(CI)系统的引入。\n\n要解决这个问题,你可以使用--output参数来指定输出 ppk 文件的名字和路径，便于进行自动发布。\n\n测试、发布与回滚#\n\n请参考发布流程中的测试、发布与回滚章节。\n\n元信息(Meta Info)的使用#\n\n在发布热更新版本时，或者在网页端，你可以编辑版本的元信息。这是一段在检查更新时可以获得的字符串，你可以在其中按你所想的格式（一般建议用JSON\n格式）保存一些信息。\n\n比如我们可以在元信息中约定字段标志silent，表示需要静默更新。当我们上传热更包填写 metainfo 时，以JSON 格式输入：\n\n\n\n> 请注意，我们并不对输入做任何格式校验和约束，请自行校验输入是否正确。\n\n此时在客户端检查更新时，能获取到我们刚刚输入的元信息，但它并不具备任何功能，只是一个字符串而已。所以我们其实需要预先在更新流程中加入对应的处理逻辑：\n\n\n\n我们在原有的更新流程中加入元信息的读取和判断：\n\n\n\n又比如，可能某个版本包含一些重要的公告内容，所以还可以在上面插入一个公告字段等等。如何使用元信息，完全取决于您的想象力！","routePath":"/bestpractice","lang":"","toc":[{"text":"优化原生和热更包体积","id":"优化原生和热更包体积","depth":4,"charIndex":-1},{"text":"有很多渠道包需要热更，如何操作比较方便？","id":"有很多渠道包需要热更如何操作比较方便","depth":4,"charIndex":899},{"text":"如何支持 aab 格式的原生包？","id":"如何支持-aab-格式的原生包","depth":4,"charIndex":1301},{"text":"CI 的集成","id":"ci-的集成","depth":4,"charIndex":1432},{"text":"测试、发布与回滚","id":"测试发布与回滚","depth":4,"charIndex":1550},{"text":"元信息(Meta Info)的使用","id":"元信息meta-info的使用","depth":4,"charIndex":1583}],"domain":"","frontmatter":{"order":13,"title":"场景实践","type":"开发指南"},"version":""},{"id":1,"title":"命令行工具","content":"安装#\n\n\n\n\n命令#\n\npushy bundle#\n\n生成热更资源包。会自动探测项目中是否使用了 expo、taro 等框架并自动调用对应的命令行打包。如果探测不准确或使用对应命令行打包时报错，可尝试使用\n--rncli 参数来指定官方命令行打包。\n\n * platform: ios|android|harmony 对应的平台\n * entryFile: 入口脚本文件\n * intermediaDir: 临时文件输出目录\n * output: 最终 ppk 文件输出路径\n * dev: 是否打包开发版本\n * sourcemap: 是否生成 sourcemap(需 cli 版本 1.11.0+)\n * no-interactive: 不进行交互式提示\n * rncli: 指定使用官方命令行打包 (需 cli 版本 1.40.0+)\n * expo: 指定使用 expo 的命令行打包 (需 cli 版本 1.40.0+)\n * taro: 指定使用 taro 的命令行打包 (需 cli 版本 1.40.0+)\n\n从 v1.44.2 版本开始，新增了以下直接上传发布的参数（等同于打包完成后连续调用 pushy publish 命令）：\n\n * name: 指定热更新版本的名字(版本号)\n * description: 指定热更新版本的描述信息，可以对用户进行展示\n * metaInfo: 指定热更新版本的元信息，可以用来保存一些额外信息，具体用法可参考场景实践。\n\n--------------------------------------------------------------------------------\n\npushy parseIpa [ipaFile]#\n\n解析 ipa 文件并输出一些相关信息，如版本号，编译时间戳等。\n\n--------------------------------------------------------------------------------\n\npushy parseApk [apkFile]#\n\n解析 apk 文件并输出一些相关信息，如版本号，编译时间戳等。\n\n--------------------------------------------------------------------------------\n\npushy parseApp [appFile]#\n\n解析 app 文件并输出一些相关信息，如版本号，编译时间戳等。\n\n--------------------------------------------------------------------------------\n\npushy diff [origin][next]#\n\n提供两个 ppk 文件，生成从 origin 到 next 版本的差异更新包。\n\n * output: diff 文件输出路径\n\n--------------------------------------------------------------------------------\n\npushy diffFromApk [apkFile][next]#\n\n提供一个 apk 文件和一个 ppk 文件，生成从 apk 文件到 next 版本的差异更新包。\n\n如果使用热更新开放平台，你不需要自己执行此命令。\n\n * output: diff 文件输出路径\n\n--------------------------------------------------------------------------------\n\npushy diffFromApp [appFile][next]#\n\n提供一个 app 文件和一个 ppk 文件，生成从 app 文件到 next 版本的差异更新包。\n\n如果使用热更新开放平台，你不需要自己执行此命令。\n\n * output: diff 文件输出路径\n\n--------------------------------------------------------------------------------\n\npushy diffFromIpa [ipaFile][next]#\n\n提供一个 ipa 文件和一个 ppk 文件，生成从 ipa 文件到 next 版本的差异更新包。\n\n如果使用热更新开放平台，你不需要自己执行此命令。\n\n * output: diff 文件输出路径\n\n--------------------------------------------------------------------------------\n\npushy login [email][pwd]#\n\n登录热更新开放平台。你需要先登录才能使用下面的命令。\n\n--------------------------------------------------------------------------------\n\npushy logout#\n\n登出并清除本地的登录信息\n\n--------------------------------------------------------------------------------\n\npushy me#\n\n查看自己是否已经登录，以及昵称等信息。\n\n--------------------------------------------------------------------------------\n\npushy createApp#\n\n创建应用并立刻绑定到当前工程。这项操作也可以在网页管理端进行。\n\n * platform: ios|android|harmony 对应的平台\n * name: 应用名称\n * downloadUrl: 应用安装包的下载地址\n\n--------------------------------------------------------------------------------\n\npushy deleteApp [appId]#\n\n删除已有应用。所有已创建的应用包、热更新版本都会被同时删除。这项操作也可以在网页管理端进行。\n\n * platform: ios|android|harmony 对应的平台\n\n--------------------------------------------------------------------------------\n\npushy apps#\n\n查看当前已创建的全部应用。这项操作也可以在网页管理端进行。\n\n * platform: ios|android|harmony 对应的平台\n\n--------------------------------------------------------------------------------\n\npushy selectApp [appId]#\n\n绑定应用到当前工程。\n\n * platform: ios|android|harmony 对应的平台\n\n--------------------------------------------------------------------------------\n\npushy uploadIpa [ipaFile]#\n\n上传 ipa 文件到开放平台。\n\n * note: 备注（cli 需 1.24.0 +）\n\n--------------------------------------------------------------------------------\n\npushy uploadApk [apkFile]#\n\n上传 apk 文件到开放平台。\n\n * note: 备注（cli 需 1.24.0 +）\n\n--------------------------------------------------------------------------------\n\npushy uploadApp [appFile]#\n\n上传 app 文件到开放平台。\n\n * note: 备注（cli 需 1.24.0 +）\n\n--------------------------------------------------------------------------------\n\npushy packages#\n\n查看已经上传的原生包。这项操作也可以在网页管理端进行。\n\n * platform: ios|android|harmony 对应的平台\n\n--------------------------------------------------------------------------------\n\npushy publish [ppkFile]#\n\n发布新的热更新版本（ppk 文件）。\n\n * platform: ios|android|harmony 对应的平台\n * name: 当前热更新版本的名字(版本号)\n * description: 当前热更新版本的描述信息，可以对用户进行展示\n * metaInfo: 当前热更新版本的元信息，可以用来保存一些额外信息，具体用法可参考场景实践。\n\n--------------------------------------------------------------------------------\n\npushy versions#\n\n分页列举可用的版本。这项操作也可以在网页管理端进行。\n\n * platform: ios|android|harmony 对应的平台\n\n--------------------------------------------------------------------------------\n\npushy update#\n\n为一个原生包版本绑定一个热更新版本。这项操作也可以在网页管理端进行。以下参数中packageId，packageVersion，minPackageVersio\nn和maxPackageVersion四选一即可。\n\n * platform: ios|android|harmony 对应的平台\n * versionId: 要绑定的热更新版本 ID\n * packageId: 要绑定的原生包 ID （四选一）\n * packageVersion: 要绑定的原生包版本名（四选一，需 cli 版本 1.7.2+）\n * minPackageVersion: 要绑定的最低原生包版本，大于等于此版本的将逐个绑定（四选一，需 cli 版本 1.27.0+）\n * maxPackageVersion: 要绑定的最高原生包版本，小于等于此版本的将逐个绑定（四选一，需 cli 版本 1.27.0+）\n * rollout: 灰度发布范围（1-100），默认为 100 （需 cli 版本 1.31.0+）","routePath":"/cli","lang":"","toc":[{"text":"安装","id":"安装","depth":3,"charIndex":-1},{"text":"命令","id":"命令","depth":3,"charIndex":7},{"text":"pushy bundle","id":"pushy-bundle","depth":4,"charIndex":12},{"text":"pushy parseIpa [ipaFile]","id":"pushy-parseipa-ipafile","depth":4,"charIndex":723},{"text":"pushy parseApk [apkFile]","id":"pushy-parseapk-apkfile","depth":4,"charIndex":865},{"text":"pushy parseApp [appFile]","id":"pushy-parseapp-appfile","depth":4,"charIndex":1007},{"text":"pushy diff [origin][next]","id":"pushy-diff-originnext","depth":4,"charIndex":1149},{"text":"pushy diffFromApk [apkFile][next]","id":"pushy-difffromapk-apkfilenext","depth":4,"charIndex":1324},{"text":"pushy diffFromApp [appFile][next]","id":"pushy-difffromapp-appfilenext","depth":4,"charIndex":1542},{"text":"pushy diffFromIpa [ipaFile][next]","id":"pushy-difffromipa-ipafilenext","depth":4,"charIndex":1760},{"text":"pushy login [email][pwd]","id":"pushy-login-emailpwd","depth":4,"charIndex":1978},{"text":"pushy logout","id":"pushy-logout","depth":4,"charIndex":2115},{"text":"pushy me","id":"pushy-me","depth":4,"charIndex":2226},{"text":"pushy createApp","id":"pushy-createapp","depth":4,"charIndex":2340},{"text":"pushy deleteApp [appId]","id":"pushy-deleteapp-appid","depth":4,"charIndex":2554},{"text":"pushy apps","id":"pushy-apps","depth":4,"charIndex":2750},{"text":"pushy selectApp [appId]","id":"pushy-selectapp-appid","depth":4,"charIndex":2916},{"text":"pushy uploadIpa [ipaFile]","id":"pushy-uploadipa-ipafile","depth":4,"charIndex":3076},{"text":"pushy uploadApk [apkFile]","id":"pushy-uploadapk-apkfile","depth":4,"charIndex":3232},{"text":"pushy uploadApp [appFile]","id":"pushy-uploadapp-appfile","depth":4,"charIndex":3388},{"text":"pushy packages","id":"pushy-packages","depth":4,"charIndex":3544},{"text":"pushy publish [ppkFile]","id":"pushy-publish-ppkfile","depth":4,"charIndex":3712},{"text":"pushy versions","id":"pushy-versions","depth":4,"charIndex":3995},{"text":"pushy update","id":"pushy-update","depth":4,"charIndex":4162}],"domain":"","frontmatter":{"order":12,"title":"命令行工具","type":"开发指南"},"version":""},{"id":2,"title":"","content":"","routePath":"/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"价格","content":"","routePath":"/pricing","lang":"","toc":[],"domain":"","frontmatter":{"title":"价格"},"version":""}]